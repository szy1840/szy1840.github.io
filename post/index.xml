<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Ziyan's Blog</title><link>https://szy1840.github.io/post/</link><description>Recent content in Posts on Ziyan's Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 28 Oct 2025 10:00:00 -0400</lastBuildDate><atom:link href="https://szy1840.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>SwiftUI 侧边栏实现：三层结构和踩坑记录</title><link>https://szy1840.github.io/post/2025-10-29-build-a-side-drawer-in-swift-ui/</link><pubDate>Tue, 28 Oct 2025 10:00:00 -0400</pubDate><guid>https://szy1840.github.io/post/2025-10-29-build-a-side-drawer-in-swift-ui/</guid><description>&lt;h1 id="swiftui-侧边栏实现三层结构和踩坑记录"&gt;SwiftUI 侧边栏实现：三层结构和踩坑记录&lt;/h1&gt;
&lt;p&gt;侧边栏（Side Drawer）是移动端中常见的交互模式，从屏幕边缘滑入/点击菜单按键显示菜单或附加功能。本文总结了我在实现 Profile 页侧边栏时的设计思路和踩过的坑：为什么需要三层 ZStack 结构，以及如何避免抖动问题。&lt;/p&gt;
&lt;p&gt;目标效果，侧边栏打开时：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;视觉焦点 → 侧边栏（最亮、最清晰）
 ↓ 覆盖
 遮罩层（半透明黑色）
 ↓ 变暗
 主内容（仍可见但失焦）
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="三层-zstack-设计"&gt;三层 ZStack 设计&lt;/h2&gt;
&lt;p&gt;层级结构设计：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;ZStack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;topLeading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// 第1层：主内容（Profile 内容）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;ScrollView&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// Profile 页面内容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// 第2层：半透明遮罩层（仅侧边栏显示时出现）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;isDrawerVisible&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ignoresSafeArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onTapGesture&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;isDrawerVisible&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gesture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;closeDrawerGesture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// 第3层：侧边栏（始终存在，通过 offset 控制位置）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;ProfileDrawerView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;isDrawerVisible&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;320&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;allowsHitTesting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isDrawerVisible&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为什么需要三层结构？首先，第一层，即主内容层必然存在，用于显示本身 Profile 的内容；其次，第三层，侧边栏层也必然存在，用于显示侧边栏内容（账号信息、菜单等）。关键在于还需要有一层半透明遮罩层。&lt;/p&gt;
&lt;p&gt;另外注意，第三层使用 &lt;code&gt;offset&lt;/code&gt; 动画而非条件渲染（&lt;code&gt;if isDrawerVisible&lt;/code&gt;），性能更好。同时，通过 &lt;code&gt;.allowsHitTesting(isDrawerVisible)&lt;/code&gt; 控制交互性，避免隐藏时拦截事件。从设计思路来讲，Drawer 并不是 显示/隐藏 两种状态下的两个不同视图，它始终存在于视图层级中，只是通过位移控制可见性，通过 hit-testing 控制交互性。&lt;/p&gt;
&lt;h3 id="遮罩层设计"&gt;遮罩层设计&lt;/h3&gt;
&lt;p&gt;遮罩层承担多重作用：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;交互拦截 + 自定义响应&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供一个全屏的可点击区域&lt;/li&gt;
&lt;li&gt;点击任意位置关闭侧边栏&lt;/li&gt;
&lt;li&gt;防止用户的操作穿透到第一层，比如误触主内容层的按钮或交互元素&lt;/li&gt;
&lt;li&gt;拦截之后，可以用于响应点击/滑动等手势，实现关闭侧边栏&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;视觉引导&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>朋友圈系统设计：好友关系与 Fan-out Feed</title><link>https://szy1840.github.io/post/2025-10-27-social-media-fan-out-feed/</link><pubDate>Mon, 27 Oct 2025 15:30:00 -0400</pubDate><guid>https://szy1840.github.io/post/2025-10-27-social-media-fan-out-feed/</guid><description>&lt;h1 id="朋友圈系统设计好友关系与-fan-out-feed"&gt;朋友圈系统设计：好友关系与 Fan-out Feed&lt;/h1&gt;
&lt;p&gt;在社交应用里，一个常见的系统就是朋友圈系统。其主要功能有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户发布 Moment（朋友圈动态）后，所有好友应该能看到&lt;/li&gt;
&lt;li&gt;用户打开朋友圈时，只看到好友发布的内容&lt;/li&gt;
&lt;li&gt;删除好友后，双方都不应再看到对方的历史动态&lt;/li&gt;
&lt;li&gt;点赞和评论只对共同好友可见&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;换句话说，就是要实现 private social feed/friends-only feed。&lt;/p&gt;
&lt;h2 id="feed-系统的两种经典模式"&gt;Feed 系统的两种经典模式&lt;/h2&gt;
&lt;p&gt;在社交应用中，Feed 系统主要有两种实现模式：&lt;/p&gt;
&lt;h3 id="fan-out-on-write写扩散"&gt;Fan-out on Write（写扩散）&lt;/h3&gt;
&lt;p&gt;当用户发布内容时，立即将内容复制到所有粉丝/好友的 Feed 中：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;用户A发布 Moment M
→ 写入用户B的feed
→ 写入用户C的feed
→ 写入用户D的feed
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取极快，用户只需查询自己的 feed&lt;/li&gt;
&lt;li&gt;适合读多写少的场景&lt;/li&gt;
&lt;li&gt;实时性好&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写入成本高（N+1 次写入，N=好友数）&lt;/li&gt;
&lt;li&gt;对好友数多的用户不友好&lt;/li&gt;
&lt;li&gt;有冗余数据（但一般只存Moment的索引，所以冗余可控）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fan-out-on-read读扩散"&gt;Fan-out on Read（读扩散）&lt;/h3&gt;
&lt;p&gt;当用户打开 Feed 时，实时查询所有关注对象的最新内容：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;用户A打开Feed
→ 查询好友B的moments
→ 查询好友C的moments
→ 查询好友D的moments
→ 聚合排序后返回
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写入简单，只需写入一次&lt;/li&gt;
&lt;li&gt;无冗余数据&lt;/li&gt;
&lt;li&gt;适合好友数多的用户（超级节点）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取慢（需要多次查询）&lt;/li&gt;
&lt;li&gt;复杂的聚合排序逻辑&lt;/li&gt;
&lt;li&gt;实时性依赖查询性能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="我的选择fan-out-on-write"&gt;我的选择：Fan-out on Write&lt;/h3&gt;
&lt;p&gt;考虑到朋友圈的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;朋友圈的好友数量通常是有限的（&amp;lt; 500）&lt;/li&gt;
&lt;li&gt;用户打开朋友圈频率高（读远多于写）&lt;/li&gt;
&lt;li&gt;需要良好的实时体验&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我选择了 &lt;strong&gt;Fan-out on Write&lt;/strong&gt; 模式，并结合 Firebase Cloud Functions 实现 Feed 分发。&lt;/p&gt;</description></item><item><title>Firebase 入门指南：从零构建现代 Web 与移动后端</title><link>https://szy1840.github.io/post/2025-10-11-firebase-intro/</link><pubDate>Sat, 11 Oct 2025 15:00:00 -0400</pubDate><guid>https://szy1840.github.io/post/2025-10-11-firebase-intro/</guid><description>&lt;h2 id="firebase-入门指南从零构建现代-web-与移动后端"&gt;Firebase 入门指南：从零构建现代 Web 与移动后端&lt;/h2&gt;
&lt;p&gt;Firebase 是 Google 提供的BaaS平台，非常适合独立开发者、全栈工程师或小团队快速构建 Web、iOS、Android 应用。它集成了数据库、身份验证、托管、函数、存储等核心能力，让开发者几乎不需要传统后端就能构建完整的应用。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="firebase-的-baas-服务"&gt;Firebase 的 BaaS 服务&lt;/h3&gt;
&lt;p&gt;在传统架构中通常需要开发前端后端，其中后端包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搭建服务器（如 Node.js）&lt;/li&gt;
&lt;li&gt;管理数据库（MySQL / MongoDB）&lt;/li&gt;
&lt;li&gt;配置认证、部署、日志、安全规则……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而 Firebase 提供了一整套即开即用的托管服务：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;功能&lt;/th&gt;
 &lt;th&gt;模块&lt;/th&gt;
 &lt;th&gt;说明&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;数据库&lt;/td&gt;
 &lt;td&gt;Firestore / Realtime Database&lt;/td&gt;
 &lt;td&gt;文档型数据库，实时同步&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;云函数&lt;/td&gt;
 &lt;td&gt;Cloud Functions&lt;/td&gt;
 &lt;td&gt;事件驱动的 Serverless 后端逻辑&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;认证&lt;/td&gt;
 &lt;td&gt;Firebase Auth&lt;/td&gt;
 &lt;td&gt;支持邮箱、Google、Apple登录等&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;存储&lt;/td&gt;
 &lt;td&gt;Firebase Storage&lt;/td&gt;
 &lt;td&gt;文件、图片、视频存储&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;托管&lt;/td&gt;
 &lt;td&gt;Firebase Hosting / App Hosting&lt;/td&gt;
 &lt;td&gt;静态站点或 SPA 托管&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;分析与通知&lt;/td&gt;
 &lt;td&gt;Analytics / FCM&lt;/td&gt;
 &lt;td&gt;用户行为分析与推送服务&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这意味着我们可以用前端（Vue / React / SwiftUI）+ Firebase 直接构建完整产品，无需再自行部署传统后端。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="项目初始化与结构"&gt;项目初始化与结构&lt;/h3&gt;
&lt;p&gt;Firebase 命令行安装和初始化项目：&lt;/p&gt;</description></item><item><title>Swift 并发入门：Task、Actor、Async/Await 与线程模型</title><link>https://szy1840.github.io/post/2025-09-29-swift-concurrency/</link><pubDate>Mon, 29 Sep 2025 11:22:13 -0400</pubDate><guid>https://szy1840.github.io/post/2025-09-29-swift-concurrency/</guid><description>&lt;h1 id="swift-并发入门taskactorasyncawait-与线程模型"&gt;Swift 并发入门：Task、Actor、Async/Await 与线程模型&lt;/h1&gt;
&lt;p&gt;Swift 并发编程是 iOS 15+ 引入的现代异步编程范式，通过 Task、Actor 和 async/await 语法提供了更安全、更易用的并发解决方案。&lt;/p&gt;
&lt;h2 id="swift-并发方案演进"&gt;Swift 并发方案演进&lt;/h2&gt;
&lt;p&gt;Swift 的并发编程经历了三个主要阶段：&lt;/p&gt;
&lt;h3 id="gcdgrand-central-dispatch"&gt;GCD（Grand Central Dispatch）&lt;/h3&gt;
&lt;p&gt;GCD 是苹果最早提供的并发解决方案，基于队列管理任务执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;DispatchQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="bp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;在后台线程执行&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;DispatchQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="bp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;回到主线程更新UI&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="operation--operationqueue"&gt;Operation / OperationQueue&lt;/h3&gt;
&lt;p&gt;Operation 提供了比 GCD 更面向对象的并发管理，支持任务取消、依赖关系和复用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;queue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OperationQueue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addOperation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="bp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;任务1&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="swift-concurrency推荐"&gt;Swift Concurrency（推荐）&lt;/h3&gt;
&lt;p&gt;Swift Concurrency 是苹果在 iOS 15+ 推荐的新方案，通过 async/await 语法避免回调地狱：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;结果&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;data&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="bp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="核心概念和执行模型"&gt;核心概念和执行模型&lt;/h2&gt;
&lt;p&gt;Swift 并发编程基于三个核心概念：Task、async/await 和 Actor。与传统的线程模型不同，Swift 并发采用任务级别的调度，线程作为底层实现细节被抽象化。&lt;/p&gt;
&lt;h3 id="核心概念"&gt;核心概念&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Task&lt;/strong&gt;：表示一个并发执行的工作单元，相当于在 Java 里的 Runnable 或 Callable。&lt;/p&gt;</description></item></channel></rss>