<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ziyan's Blog</title><link>https://szy1840.github.io/</link><description>Recent content on Ziyan's Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 11 Oct 2025 15:00:00 -0400</lastBuildDate><atom:link href="https://szy1840.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Firebase 入门指南：从零构建现代 Web 与移动后端</title><link>https://szy1840.github.io/post/2025-10-11-firebase-intro/</link><pubDate>Sat, 11 Oct 2025 15:00:00 -0400</pubDate><guid>https://szy1840.github.io/post/2025-10-11-firebase-intro/</guid><description>&lt;h2 id="firebase-入门指南从零构建现代-web-与移动后端"&gt;Firebase 入门指南：从零构建现代 Web 与移动后端&lt;/h2&gt;
&lt;p&gt;Firebase 是 Google 提供的BaaS平台，非常适合独立开发者、全栈工程师或小团队快速构建 Web、iOS、Android 应用。它集成了数据库、身份验证、托管、函数、存储等核心能力，让开发者几乎不需要传统后端就能构建完整的应用。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="firebase-的-baas-服务"&gt;Firebase 的 BaaS 服务&lt;/h3&gt;
&lt;p&gt;在传统架构中通常需要开发前端后端，其中后端包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搭建服务器（如 Node.js）&lt;/li&gt;
&lt;li&gt;管理数据库（MySQL / MongoDB）&lt;/li&gt;
&lt;li&gt;配置认证、部署、日志、安全规则……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而 Firebase 提供了一整套即开即用的托管服务：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;功能&lt;/th&gt;
 &lt;th&gt;模块&lt;/th&gt;
 &lt;th&gt;说明&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;数据库&lt;/td&gt;
 &lt;td&gt;Firestore / Realtime Database&lt;/td&gt;
 &lt;td&gt;文档型数据库，实时同步&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;云函数&lt;/td&gt;
 &lt;td&gt;Cloud Functions&lt;/td&gt;
 &lt;td&gt;事件驱动的 Serverless 后端逻辑&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;认证&lt;/td&gt;
 &lt;td&gt;Firebase Auth&lt;/td&gt;
 &lt;td&gt;支持邮箱、Google、Apple登录等&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;存储&lt;/td&gt;
 &lt;td&gt;Firebase Storage&lt;/td&gt;
 &lt;td&gt;文件、图片、视频存储&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;托管&lt;/td&gt;
 &lt;td&gt;Firebase Hosting / App Hosting&lt;/td&gt;
 &lt;td&gt;静态站点或 SPA 托管&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;分析与通知&lt;/td&gt;
 &lt;td&gt;Analytics / FCM&lt;/td&gt;
 &lt;td&gt;用户行为分析与推送服务&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这意味着我们可以用前端（Vue / React / SwiftUI）+ Firebase 直接构建完整产品，无需再自行部署传统后端。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="项目初始化与结构"&gt;项目初始化与结构&lt;/h3&gt;
&lt;p&gt;Firebase 命令行安装和初始化项目：&lt;/p&gt;</description></item><item><title>Swift 并发入门：Task、Actor、Async/Await 与线程模型</title><link>https://szy1840.github.io/post/2025-09-29-swift-concurrency/</link><pubDate>Mon, 29 Sep 2025 11:22:13 -0400</pubDate><guid>https://szy1840.github.io/post/2025-09-29-swift-concurrency/</guid><description>&lt;h1 id="swift-并发入门taskactorasyncawait-与线程模型"&gt;Swift 并发入门：Task、Actor、Async/Await 与线程模型&lt;/h1&gt;
&lt;p&gt;Swift 并发编程是 iOS 15+ 引入的现代异步编程范式，通过 Task、Actor 和 async/await 语法提供了更安全、更易用的并发解决方案。&lt;/p&gt;
&lt;h2 id="swift-并发方案演进"&gt;Swift 并发方案演进&lt;/h2&gt;
&lt;p&gt;Swift 的并发编程经历了三个主要阶段：&lt;/p&gt;
&lt;h3 id="gcdgrand-central-dispatch"&gt;GCD（Grand Central Dispatch）&lt;/h3&gt;
&lt;p&gt;GCD 是苹果最早提供的并发解决方案，基于队列管理任务执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;DispatchQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="bp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;在后台线程执行&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;DispatchQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="bp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;回到主线程更新UI&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="operation--operationqueue"&gt;Operation / OperationQueue&lt;/h3&gt;
&lt;p&gt;Operation 提供了比 GCD 更面向对象的并发管理，支持任务取消、依赖关系和复用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;queue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OperationQueue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addOperation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="bp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;任务1&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="swift-concurrency推荐"&gt;Swift Concurrency（推荐）&lt;/h3&gt;
&lt;p&gt;Swift Concurrency 是苹果在 iOS 15+ 推荐的新方案，通过 async/await 语法避免回调地狱：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;结果&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;data&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="bp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="核心概念和执行模型"&gt;核心概念和执行模型&lt;/h2&gt;
&lt;p&gt;Swift 并发编程基于三个核心概念：Task、async/await 和 Actor。与传统的线程模型不同，Swift 并发采用任务级别的调度，线程作为底层实现细节被抽象化。&lt;/p&gt;
&lt;h3 id="核心概念"&gt;核心概念&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Task&lt;/strong&gt;：表示一个并发执行的工作单元，相当于在 Java 里的 Runnable 或 Callable。&lt;/p&gt;</description></item></channel></rss>